// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pienaahj/UserDatabase (interfaces: UserDatabase)

// Package mock_UserDatabase is a generated GoMock package.
package mock_UserDatabase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pienaahj/UserDatabase/models"
)

// MockUserDatabase is a mock of UserDatabase interface.
type MockUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabaseMockRecorder
}

// MockUserDatabaseMockRecorder is the mock recorder for MockUserDatabase.
type MockUserDatabaseMockRecorder struct {
	mock *MockUserDatabase
}

// NewMockUserDatabase creates a new mock instance.
func NewMockUserDatabase(ctrl *gomock.Controller) *MockUserDatabase {
	mock := &MockUserDatabase{ctrl: ctrl}
	mock.recorder = &MockUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatabase) EXPECT() *MockUserDatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDatabase) Create(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserDatabaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDatabase)(nil).Create), arg0, arg1)
}

// DeleteByUsername mocks base method.
func (m *MockUserDatabase) DeleteByUsername(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUsername", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUsername indicates an expected call of DeleteByUsername.
func (mr *MockUserDatabaseMockRecorder) DeleteByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUsername", reflect.TypeOf((*MockUserDatabase)(nil).DeleteByUsername), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockUserDatabase) FindOne(arg0 context.Context, arg1 interface{}) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserDatabaseMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserDatabase)(nil).FindOne), arg0, arg1)
}
